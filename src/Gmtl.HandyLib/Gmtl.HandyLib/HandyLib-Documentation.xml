<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gmtl.HandyLib</name>
    </assembly>
    <members>
        <member name="T:Gmtl.HandyLib.Cache.Cache`2">
            <summary>
            Cache cna by initialized via initializeFunc method or by Insert method
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Gmtl.HandyLib.Cache.Cache`2.GetAll">
            <summary>
            Return a copy of the whole data in cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Cache.Cache`2.FindBy``1(System.Func{`1,System.Boolean},System.Func{`1,``0},Gmtl.HandyLib.OrderDirection,System.Int32,System.Int32)">
            <summary>
            Return a page of data in cache
            </summary>
            <typeparam name="TOrder"></typeparam>
            <param name="filterFunc"></param>
            <param name="orderFunc"></param>
            <param name="orderDirection"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.Extensions.HLEnumExtensions">
            <summary>
            Extensions for Enum
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Extensions.HLEnumExtensions.GetDescription(System.Enum)">
            <summary>
            Return Description attribute value
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Extensions.HLEnumExtensions.GetValues``1">
            <summary>
            Get list of values in enum
            </summary>
        </member>
        <member name="T:Gmtl.HandyLib.Extensions.HLObjectExtensions">
            <summary>
            Useful extensions for System.Object
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Extensions.HLObjectExtensions.PropertyList(System.Object)">
            <summary>
            List all properties and their values 
            </summary>
            <param name="obj"></param>
            <returns>List of all properties and their values</returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLCloner">
            <summary>
            Clones an object
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLCloner.CloneViaSerialization``1(``0)">
            <summary>
            Clones an object using XmlSerializer
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="obj">Actual object to clone</param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLCrypter">
            <summary>
            HLCrypter encrypt and decrypt strings
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLCrypter.SetEntropy(System.String)">
            <summary>
            Set seed for encryption and decryption
            </summary>
            <param name="seed">new seed</param>
        </member>
        <member name="M:Gmtl.HandyLib.HLCrypter.EncryptString(System.String)">
            <summary>
            Encrypt string
            </summary>
            <param name="plainText">text to encrypt</param>
            <returns>encrypted text using entropy seed</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLCrypter.DecryptString(System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="encryptedText">text to decrypt</param>
            <returns>decrypted text using entropy seed</returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLDateTime">
            <summary>
            Handy methods related to System.DateTime
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.HLDateTime.NowUnixTimestamp">
            <summary>
            Return local Linux timestamp 
            </summary>
            <remarks>
            <code>
            int unixTimestamp = HLDateTime.NowUnixTimestamp;
            </code>
            </remarks>
        </member>
        <member name="M:Gmtl.HandyLib.HLDateTime.FromUnixTimestamp(System.Int64)">
            <summary>
            Convert unix timestamp to System.DateTime
            </summary>
            <param name="timestamp">Unix timestamp to be converted</param>
            <returns>DateTime representation of unix timestamp</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLDateTime.ToUnixTimestamp(System.DateTime)">
            <summary>
            Convert System.DateTime to unix timestamp
            </summary>
            <param name="dateTime">DateTime struct to be converted</param>
            <returns>unix timestamp representation for the provided DateTime</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLDateTime.TimeAgo(System.DateTime)">
            <summary>
            Return user-friendly date description
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLDllEmbeddedResource.GetTextResource(System.String,System.Reflection.Assembly)">
            <summary>
            Return content of the file
            </summary>
            <param name="resourceName"> path to the file included as embedded resource. IMPORTANT: replace '\\' with '.' eg. Scripts\\run.bat => Scripts.run.bat</param>
            <param name="assembly">Assembly with resource</param>
            <returns>content of the file</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLDllEmbeddedResource.GetTextResource(System.String)">
            <summary>
            Return content of the file in calling assembly
            </summary>
            <param name="resourceName"> path to the file included as embedded resource. IMPORTANT: replace '\\' with '.' eg. Scripts\\run.bat => Scripts.run.bat</param>
            <returns>content of the file</returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLExceptionHelper">
            <summary>
            Handy methods related to System.Exception
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLExceptionHelper.ToXmlString(System.Exception,System.Boolean)">
            <summary>
            Return XML serialized string of Exception provided in parameter
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLHash.ComputeHash(System.String)">
            <summary>
            Computes has for given input
            The computed hash is different each time because the salt is generated dynamically
            </summary>
            <param name="input">input to hash</param>
        </member>
        <member name="T:Gmtl.HandyLib.HLListPage`1">
            <summary>
            Provides base class for 'pagination'
            </summary>
            <typeparam name="T">List item type</typeparam>
        </member>
        <member name="M:Gmtl.HandyLib.HLListPage`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates one page based on input
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:Gmtl.HandyLib.HLListPage`1.Count">
            <summary>
            Actual number of items on current page
            </summary>
        </member>
        <member name="T:Gmtl.HandyLib.IHLMailNotifier">
            <summary>
            HLMailNotifier interface
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.IHLMailNotifier.TestConfiguration">
            <summary>
            Will try to send message to itself
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLPredicateBuilder">
             <summary>
             Expression predicate builder
             </summary>
             <remarks>
             <code>
             Expression&lt;Func&lt;OfferMailingSubscription, bool&gt;&gt; filter = s =&gt; EF.Functions.ILike(s.Email, subs.Email);
             
             if (!string.IsNullOrWhiteSpace(subs.Location))
                 filter = HLPredicateBuilder.And(filter, s =&gt; EF.Functions.ILike(s.Location, subs.Location));
            
             if (!string.IsNullOrWhiteSpace(subs.Position))
                 filter = HLPredicateBuilder.And(filter, s =&gt; EF.Functions.ILike(s.Position, subs.Position));
             </code>
             </remarks>
        </member>
        <member name="T:Gmtl.HandyLib.HLQueue`1">
            <summary>
            Queue with Enqueue/Dequeue events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Gmtl.HandyLib.HLRandomizer">
            <summary>
            Handy random data provider
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.HLRandomizer.RandomString">
            <summary>
            Random string provider
            </summary>
            <remarks> 
            <code>
            string randomString1 = HLRandomizer.RandomString.Next();
            string randomString2 = HLRandomizer.RandomString.Next(100);//max length
            string randomString3 = HLRandomizer.RandomString.NextExact(10);
            string randomString4 = HLRandomizer.RandomString.Next(10, 100);//min 100 and max 100
            </code>
            </remarks>
        </member>
        <member name="P:Gmtl.HandyLib.HLRandomizer.RandomDouble">
            <summary>
            Random double provider
            </summary>
            <remarks> 
            <code>
            double randomDouble = HLRandomizer.RandomDouble.Next(1.0, 100.0);
            </code>
            </remarks>
        </member>
        <member name="T:Gmtl.HandyLib.HLSerializer">
            <summary>
            Serialization and deserialization helper class
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLSerializer.SerializeToXml``1(``0,System.Boolean)">
            <summary>
            Serializes object to XML
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="objectToSerialize">Object to serialize</param>
            <param name="useNamespaces">If true, adds namespaces to output string</param>
            <returns>Serialized object</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLSerializer.SerializeToXmlFile``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes object and saves it into a file
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="objectToSerialize">Object to serialize</param>
            <param name="useNamespaces">If true, adds namespaces to output string</param>
            <param name="filename">Filename where save the serialized object</param>
        </member>
        <member name="M:Gmtl.HandyLib.HLSerializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes string to specified object type
            </summary>
            <typeparam name="T">Expected object type</typeparam>
            <param name="xml">serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Gmtl.HandyLib.HLSerializer.DeserializeFromXmlFile``1(System.String)">
            <summary>
            Deserializes object from specified filename
            </summary>
            <typeparam name="T">Expected object type</typeparam>
            <param name="filename">File storing serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="P:Gmtl.HandyLib.HLSingleton`1.Instance">
            <summary>
            Class instance
            </summary>
        </member>
        <member name="T:Gmtl.HandyLib.HLStopWatch">
            <summary>
            Helper for efficient handling Stopwatch class
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLStopWatch.Start(System.String)">
            <summary>
            Starts the watched with provided or default key
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLStopWatch.Stop(System.String)">
            <summary>
            Stops the watcher and return elapsed milliseconds
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLStopWatch.Elapsed(System.String)">
            <summary>
            Returns how many milliseconds elapsed since start
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLStopWatch.Clean(System.String)">
            <summary>
            Clear StopWatch
            </summary>
            <param name="key">StopWatch key</param>
        </member>
        <member name="T:Gmtl.HandyLib.HLString">
            <summary>
            Handy methods related to System.String
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.ValueOrDefault(System.String,System.String)">
            <summary>
            Returns input if it's not null or whitespace, defaultValue otherwise
            </summary>
            <remarks>
            <code>
            HLString.ValueOrDefault("test", "replaced"); //'test' returned
            HLString.ValueOrDefault("", "replaced"); //'replaced' returned
            HLString.ValueOrDefault(null, "replaced"); //'replaced' returned
            </code>
            </remarks>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.ValueOrEmpty(System.String)">
            <summary>
            Returns input if it's not null or whitespace, String.Empty otherwise
            </summary>
            <remarks>
            <code>
            HLString.ValueOrEmpty("test"); //'test' returned
            HLString.ValueOrEmpty(null); //'String.Empty' returned
            </code>
            </remarks>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.MaxOf(System.String,System.Int32,System.String)">
            <summary>
            Returns truncated string
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.StripHtml(System.String)">
            <summary>
            Removes HTML tags from input
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.CleanHtml(System.String)">
            <summary>
            Removes all attributes from HTML string
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.RemoveAccents(System.String)">
            <summary>
            Removes non-standard letters like ę=>e
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.RemoveUnicode(System.String)">
            <summary>
            Removes all unicode characters from string
            Useful in XML deserialization
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.FirstLetterToUpper(System.String)">
            <summary>
            Converts first letter in sentence to uppercase letter
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.ReplaceMulti(System.String,System.String)">
            <summary>
            Replaces multiple characters with single
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLString.ToSlug(System.String,System.Int32)">
            <summary>
            Creates http url friendly text from input
            </summary>
            <param name="input"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.HLTasks">
            <summary>
            System.Threading.Tasks extensions
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.HLTasks.PrimitiveSleep(System.Int32,System.Threading.CancellationToken[])">
            <summary>
            Sleep for tasks with cancellation token support
            </summary>
            <param name="minutes">sleep in minutes</param>
            <param name="tokens">external tokens</param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.Operations.Operation`1">
            <summary>
            Class for managing multiple operations and their statuses
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.Operation`1.ErrorMsg">
            <summary>
            Message if Func return false
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.Operation`1.SuccessMsg">
            <summary>
            Message if Func return true
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.ExecuteAll(Gmtl.HandyLib.Operations.Operation{`0}[])">
            <summary>
            Executed all operation in sequece
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.Create(Gmtl.HandyLib.Operations.OperationResult{`0})">
            <summary>
            Create operation that was already executed. Just pass the result
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.Create(System.Func{`0},System.String,System.String)">
            <summary>
            Function returning pure value
            </summary>
            <param name="func"></param>
            <param name="errorMsg"></param>
            <param name="successMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.Create(System.Action,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="errorMsg"></param>
            <param name="successMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.Create(System.Func{Gmtl.HandyLib.Operations.OperationResult{`0}},System.String,System.String)">
            <summary>
            Function returning OperationResult value
            </summary>
            <param name="func"></param>
            <param name="errorMsg"></param>
            <param name="successMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.IfSuccess(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.IfError(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.Operation`1.Always(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.Operations.OperationResult`1">
            <summary>
            Generic class working as a wrapper
            </summary>
            <typeparam name="T">type</typeparam>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.OperationResult`1.Value">
            <summary>
            Result value
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.OperationResult`1.Status">
            <summary>
            Operation status
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.OperationResult`1.IsSuccess">
            <summary>
            Indicates if operation was successful
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.OperationResult`1.Message">
            <summary>
            Extra info send with operation result (optional)
            </summary>
        </member>
        <member name="P:Gmtl.HandyLib.Operations.OperationResult`1.Errors">
            <summary>
            List of potential errors from the Operation
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Operations.OperationResult`1.AsJson">
            <summary>
            return Object as a JSON string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.Operations.OperationStatus">
            <summary>
            Status of executed operation
            </summary>
        </member>
        <member name="T:Gmtl.HandyLib.UserMessage">
            <summary>
            Provides a container for standard UI user messages
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Validators.HLPhoneValidator.IsValidPhoneNumber(System.String)">
            <summary>
            Test if provided string is valid phone number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Gmtl.HandyLib.Validators.HLUrlValidator">
            <summary>
            Validator for internet urls
            </summary>
        </member>
        <member name="M:Gmtl.HandyLib.Validators.HLUrlValidator.IsValidUrl(System.String)">
            <summary>
            Validates if provided string is valid url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
    </members>
</doc>
